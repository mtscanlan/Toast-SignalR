<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                @Html.ActionLink("Toast", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li>@Html.ActionLink("Home", "Index", "Home", new { area = "" }, null)</li>
                    <li>@Html.ActionLink("API", "Index", "Help", new { area = "" }, null)</li>
                </ul>
            </div>
        </div>
    </div>
    <div class="container body-content">
        @RenderBody()
        <hr />
        <footer>
            <p>&copy; @DateTime.Now.Year - Crumbs Inc.</p>
        </footer>
    </div>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")

    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.1.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="/signalr/hubs"></script>
    <script>
        $(document).ready(function () {

            // Let's check if the browser supports notifications
            if (!(window.Notification)) {
                alert("This browser does not support system notifications");
            }

                // Let's check whether notification permissions have already been granted
            else if (Notification.permission === "granted") {
                // If it's okay let's create a notification
                var notification = new Notification(
                    "The word 'toast' comes from the Latin word torrere; 'to burn'");
            }

                // Otherwise, we need to ask the user for permission
            else if (Notification.permission !== 'denied') {
                Notification.requestPermission(function (permission) {
                    // If the user accepts, let's create a notification
                    if (permission === "granted") {
                        var notification = new Notification(
                            "The word 'toast' comes from the Latin word torrere; 'to burn'");
                    }
                });
            }

            var toastMessages = $.connection.toastMessages;

            toastMessages.client.addMessage = function (message) {
                var notification = new Notification("Recieved - " + message);
            };
            
            $.connection.hub.start();

            $("#french-toast-btn").click(function (e) {
                $.ajax({
                    url: '/api/toast/french',
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    success: function (data, status, xhr) {
                        var notification = new Notification("Sent - " + data);
                    },
                    error: function (xhr, status, error) {
                        alert(error);
                    }
                })
            });
            $("#melba-toast-btn").click(function (e) {
                $.ajax({
                    url: '/api/toast/melba',
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    success: function (data, status, xhr) {
                        var notification = new Notification("Sent - " + data);
                    },
                    error: function (xhr, status, error) {
                        alert(error);
                    }
                })
            });
            $("#burnt-toast-btn").click(function (e) {
                $.ajax({
                    url: '/api/toast/burnt',
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    success: function (data, status, xhr) {
                        var notification = new Notification("Sent - " + data);
                    },
                    error: function (xhr, status, error) {
                        alert(error);
                    }
                })
            });
        });
    </script>
    @RenderSection("scripts", required: false)
</body>
</html>
